#!/usr/bin/env python3
"""
Model retraining with TensorFlow 2.12.0 for maximum compatibility
Based on your all_breeds_high_accuracy_v1_final architecture
"""

import tensorflow as tf
import numpy as np
import os
import json
from pathlib import Path

def setup_tensorflow_environment():
    """TensorFlow setup for maximum compatibility"""
    print(f"üîß TensorFlow version: {tf.__version__}")
    
    # Recommended version for compatibility
    recommended_version = "2.12.0"
    current_version = tf.__version__
    
    if not current_version.startswith("2.12"):
        print(f"‚ö†Ô∏è  –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è TensorFlow: {current_version}")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {recommended_version}")
        print("üîß –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"   pip install tensorflow=={recommended_version}")
        print("")
    
    return current_version.startswith("2.12")

def create_compatible_model_architecture():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏"""
    print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    base_model = tf.keras.applications.EfficientNetV2B3(
        weights='imagenet',
        include_top=False,
        input_shape=(384, 384, 3)
    )
    
    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
    base_model.trainable = False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –≥–æ–ª–æ–≤–Ω—ã–µ —Å–ª–æ–∏
    model = tf.keras.Sequential([
        base_model,
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(40, activation='softmax')  # 40 –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫
    ])
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ —Å–æ–∑–¥–∞–Ω–∞")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {model.count_params():,}")
    
    return model

def convert_to_compatible_tflite(model, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π TensorFlow Lite —Ñ–æ—Ä–º–∞—Ç"""
    print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TensorFlow Lite —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = tf.lite.TFLiteConverter.from_keras_model(model)
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    converter.optimizations = []  # –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS]
    converter.experimental_enable_resource_variables = False
    converter.allow_custom_ops = False
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ float32
    converter.inference_input_type = tf.float32
    converter.inference_output_type = tf.float32
    converter.target_spec.supported_types = [tf.float32]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Android
    try:
        converter.experimental_new_converter = False
    except AttributeError:
        pass  # –ù–µ –≤—Å–µ –≤–µ—Ä—Å–∏–∏ TF –∏–º–µ—é—Ç —ç—Ç–æ—Ç –∞—Ç—Ä–∏–±—É—Ç
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    tflite_model = converter.convert()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(output_path, 'wb') as f:
        f.write(tflite_model)
    
    size_mb = len(tflite_model) / (1024 * 1024)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
    
    return tflite_model

def create_training_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    
    training_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ MeowAI —Å TensorFlow 2.12.0
–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Android TensorFlow Lite
"""

import tensorflow as tf
import numpy as np
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é TensorFlow
print(f"TensorFlow –≤–µ—Ä—Å–∏—è: {tf.__version__}")
if not tf.__version__.startswith("2.12"):
    print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è TensorFlow 2.12.0 –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
IMG_SIZE = (384, 384)
BATCH_SIZE = 16
EPOCHS = 20
NUM_CLASSES = 40

def create_model():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
    base_model = tf.keras.applications.EfficientNetV2B3(
        weights='imagenet',
        include_top=False,
        input_shape=(*IMG_SIZE, 3)
    )
    
    # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –¥–ª—è transfer learning
    base_model.trainable = False
    
    model = tf.keras.Sequential([
        base_model,
        tf.keras.layers.GlobalAveragePooling2D(),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(512, activation='relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(NUM_CLASSES, activation='softmax')
    ])
    
    model.compile(
        optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
        loss='categorical_crossentropy',
        metrics=['accuracy']
    )
    
    return model

def setup_data_generators(data_dir):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    train_datagen = ImageDataGenerator(
        rescale=1./255,
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        horizontal_flip=True,
        validation_split=0.2
    )
    
    train_generator = train_datagen.flow_from_directory(
        data_dir,
        target_size=IMG_SIZE,
        batch_size=BATCH_SIZE,
        class_mode='categorical',
        subset='training'
    )
    
    validation_generator = train_datagen.flow_from_directory(
        data_dir,
        target_size=IMG_SIZE,
        batch_size=BATCH_SIZE,
        class_mode='categorical',
        subset='validation'
    )
    
    return train_generator, validation_generator

def train_model():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    # –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
    data_dir = "path/to/your/cat_breeds_dataset"  # –ò–ó–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –ü–£–¢–¨
    
    if not os.path.exists(data_dir):
        print(f"‚ùå –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_dir}")
        print("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π data_dir")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    model = create_model()
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    train_gen, val_gen = setup_data_generators(data_dir)
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # Callbacks
    callbacks = [
        ModelCheckpoint(
            'best_model_compatible.h5',
            save_best_only=True,
            monitor='val_accuracy',
            mode='max'
        ),
        ReduceLROnPlateau(
            monitor='val_loss',
            factor=0.2,
            patience=3,
            min_lr=1e-7
        )
    ]
    
    # –û–±—É—á–µ–Ω–∏–µ
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    history = model.fit(
        train_gen,
        epochs=EPOCHS,
        validation_data=val_gen,
        callbacks=callbacks
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    model.save('final_model_compatible.h5')
    print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    return model

def convert_to_tflite(h5_path, output_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TensorFlow Lite"""
    model = tf.keras.models.load_model(h5_path, compile=False)
    
    converter = tf.lite.TFLiteConverter.from_keras_model(model)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    converter.optimizations = []
    converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS]
    converter.experimental_enable_resource_variables = False
    converter.allow_custom_ops = False
    converter.inference_input_type = tf.float32
    converter.inference_output_type = tf.float32
    
    tflite_model = converter.convert()
    
    with open(output_path, 'wb') as f:
        f.write(tflite_model)
    
    print(f"‚úÖ TensorFlow Lite –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")

if __name__ == "__main__":
    print("üîß –û–±—É—á–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –º–æ–¥–µ–ª–∏ MeowAI")
    print("=" * 50)
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    model = train_model()
    
    if model:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TensorFlow Lite
        convert_to_tflite('best_model_compatible.h5', 'model_compatible.tflite')
        print("üéâ –ì–æ—Ç–æ–≤–æ! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ model_compatible.tflite –≤ assets/models/model.tflite")
'''
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    script_path = "../tools/retrain_compatible_model.py"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(training_script)
    
    print(f"üìÑ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {script_path}")
    return script_path

def main():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é TensorFlow
    is_compatible = setup_tensorflow_environment()
    
    if not is_compatible:
        print("‚ö†Ô∏è  –î–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è TensorFlow 2.12.0")
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tensorflow==2.12.0")
        print("")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
    script_path = create_training_script()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ì–û–¢–û–í–û!")
    print("üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:")
    print("")
    print("1. üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
    print(f"   - –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ {script_path}")
    print("   - –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É")
    print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 retrain_compatible_model.py")
    print("")
    print("2. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    print("   - –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è convert_original_model.py")
    print("   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    print("")
    print("üí° –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!")

if __name__ == "__main__":
    main()