#!/usr/bin/env python3
"""
Converting original model all_breeds_high_accuracy_v1_final.h5
to compatible TensorFlow Lite format for Android
"""

import tensorflow as tf
import numpy as np
import os
import json
from pathlib import Path

def convert_original_model():
    """Converts original H5 model to compatible TFLite format"""
    print("üîÑ Converting original model all_breeds_high_accuracy_v1_final.h5")
    print("=" * 80)
    
    # File paths
    h5_path = "../scripts/training/all_breeds_high_accuracy_v1_final.h5"
    output_path = "../assets/models/model.tflite"
    
    # Check if H5 model exists
    if not os.path.exists(h5_path):
        print(f"‚ùå H5 model not found: {h5_path}")
        return False
    
    print(f"üìÇ Loading H5 model: {h5_path}")
    file_size = os.path.getsize(h5_path) / (1024 * 1024)
    print(f"üìä –†–∞–∑–º–µ—Ä H5 –º–æ–¥–µ–ª–∏: {file_size:.1f} –ú–ë")
    
    try:
        # Load model without compilation to avoid version conflicts
        print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        model = tf.keras.models.load_model(h5_path, compile=False)
        print("‚úÖ H5 –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        print(f"üìä –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏:")
        print(f"   –í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: {model.input_shape}")
        print(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä: {model.output_shape}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {model.count_params():,}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        converter.optimizations = []  # –ù–∏–∫–∞–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS]
        converter.experimental_enable_resource_variables = False
        converter.allow_custom_ops = False
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º float32
        converter.inference_input_type = tf.float32
        converter.inference_output_type = tf.float32
        converter.target_spec.supported_types = [tf.float32]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            converter.experimental_new_converter = False
        except:
            pass  # –ï—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ TF
        
        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TensorFlow Lite (—ç—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)...")
        print("‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è '–∑–∞–≤–∏—Å—à–∏–º' - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        tflite_model = converter.convert()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ–ª–∏
        if os.path.exists(output_path):
            backup_path = output_path.replace('.tflite', '_previous_backup.tflite')
            os.rename(output_path, backup_path)
            print(f"üíæ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫: {backup_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        with open(output_path, 'wb') as f:
            f.write(tflite_model)
        
        converted_size = len(tflite_model) / (1024 * 1024)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {output_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {converted_size:.1f} –ú–ë")
        print(f"üìâ –°–∂–∞—Ç–∏–µ: {file_size:.1f}–ú–ë ‚Üí {converted_size:.1f}–ú–ë")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        
        try:
            interpreter = tf.lite.Interpreter(model_content=tflite_model)
            interpreter.allocate_tensors()
            
            input_details = interpreter.get_input_details()
            output_details = interpreter.get_output_details()
            
            print("‚úÖ –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–†–û–ô–î–ï–ù!")
            print(f"üì• –í—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä: {input_details[0]['shape']}")
            print(f"üì§ –í—ã—Ö–æ–¥–Ω–æ–π —Ç–µ–Ω–∑–æ—Ä: {output_details[0]['shape']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
            test_input = np.random.rand(*input_details[0]['shape']).astype(np.float32)
            interpreter.set_tensor(input_details[0]['index'], test_input)
            interpreter.invoke()
            
            output = interpreter.get_tensor(output_details[0]['index'])
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å —É—Å–ø–µ—à–µ–Ω! –§–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞: {output.shape}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É FULLY_CONNECTED
            if "FULLY_CONNECTED" in str(e) and "version" in str(e):
                print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π FULLY_CONNECTED")
                print("üîß –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ —Å –±–æ–ª–µ–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π TensorFlow")
                print("üí° –†–ï–®–ï–ù–ò–ï: –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å TensorFlow 2.12.0")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∫–∞–∫ –µ—Å—Ç—å - –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
                print("üìù –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
                return "partial"
            
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def update_model_info_for_real_model():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model_info = {
        "model_name": "all_breeds_high_accuracy_v1_final_converted",
        "version": "1.0.0",
        "compatibility": "–°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TensorFlow Lite",
        "type": "EfficientNetV2-B3 (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)",
        "input_size": [384, 384, 3],
        "output_size": 40,
        "num_classes": 40,
        "note": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Android",
        "preprocessing": {
            "normalize": True,
            "mean": [0.485, 0.456, 0.406],
            "std": [0.229, 0.224, 0.225]
        },
        "breeds": [
            "abyssinian", "american_shorthair", "american_wirehair", "balinese", "bengal",
            "british_shorthair", "burmese", "chausie", "cornish_rex", "cymric",
            "cyprus", "donskoy", "egyptian_mau", "european_shorthair", "german_rex",
            "himalayan", "japanese_bobtail", "karelian_bobtail", "khao_manee", "lykoi",
            "manx", "munchkin", "nebelung", "ocicat", "oriental_shorthair",
            "persian", "peterbald", "pixie_bob", "ragamuffin", "ragdoll",
            "savannah", "scottish_fold", "selkirk_rex", "serengeti", "sokoke",
            "thai", "tonkinese", "turkish_angora", "turkish_van", "vankedisi"
        ]
    }
    
    info_path = "../assets/models/model_info.json"
    with open(info_path, 'w', encoding='utf-8') as f:
        json.dump(model_info, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {info_path}")

def main():
    print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ MeowAI")
    print("=" * 80)
    print("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å all_breeds_high_accuracy_v1_final.h5")
    print("–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π TensorFlow Lite —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Android.")
    print("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é TensorFlow
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è TensorFlow: {tf.__version__}")
    print("")
    
    result = convert_original_model()
    
    if result == True:
        update_model_info_for_real_model()
        
        print("\n" + "=" * 80)
        print("üéâ –£–°–ü–ï–•!")
        print("‚úÖ –í–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        print("üöÄ –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ FULLY_CONNECTED!")
        print("")
        print("üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤—ã —É–≤–∏–¥–∏—Ç–µ –ù–ê–°–¢–û–Ø–©–ï–ï —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥ –∫–æ—à–µ–∫!")
        print("3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
        
    elif result == "partial":
        update_model_info_for_real_model()
        
        print("\n" + "=" * 80)
        print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
        print("‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ —Å TensorFlow 2.12.0")
        print("")
        print("üîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã:")
        print("1. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)")
        print("2. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å TensorFlow 2.12.0 (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
        
    else:
        print("\n" + "=" * 80)
        print("‚ùå –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨!")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —Å TensorFlow 2.12.0")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫-–º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å H5 —Ñ–∞–π–ª–∞")

if __name__ == "__main__":
    main()