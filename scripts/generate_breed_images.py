#!/usr/bin/env python3
\"\"\"\nBreed Image Generator Script\nGenerates placeholder images for all 69 cat breeds that MeowAI can recognize.\n\nThis script creates simple colored placeholder images with breed names\nuntil real cat photos are added to the project.\n\"\"\"\n\nimport os\nfrom PIL import Image, ImageDraw, ImageFont\nimport random\n\n# Read the labels from the ML model\nLABELS_FILE = '../assets/models/labels.txt'\nOUTPUT_DIR = '../assets/images/breeds/'\nIMAGE_SIZE = (400, 300)\n\n# Cat-themed colors for placeholder images\nCOLORS = [\n    '#FF8A65',  # Primary orange\n    '#81C784',  # Secondary green\n    '#FFB74D',  # Accent orange\n    '#E57373',  # Error red\n    '#64B5F6',  # Blue\n    '#BA68C8',  # Purple\n    '#4DB6AC',  # Teal\n    '#FFD54F',  # Amber\n    '#A1887F',  # Brown\n    '#90A4AE',  # Blue grey\n]\n\ndef hex_to_rgb(hex_color):\n    \"\"\"Convert hex color to RGB tuple.\"\"\"\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\ndef format_breed_name(breed_id):\n    \"\"\"Convert breed ID to display name.\"\"\"\n    # Replace underscores with spaces and title case\n    return breed_id.replace('_', ' ').title()\n\ndef create_breed_image(breed_id, output_path):\n    \"\"\"Create a placeholder image for a cat breed.\"\"\"\n    # Create a new image with a random cat-themed color\n    bg_color = hex_to_rgb(random.choice(COLORS))\n    image = Image.new('RGB', IMAGE_SIZE, bg_color)\n    draw = ImageDraw.Draw(image)\n    \n    # Try to use a nice font, fall back to default\n    try:\n        font_large = ImageFont.truetype('/System/Library/Fonts/Arial.ttf', 36)\n        font_small = ImageFont.truetype('/System/Library/Fonts/Arial.ttf', 18)\n    except:\n        try:\n            font_large = ImageFont.truetype('arial.ttf', 36)\n            font_small = ImageFont.truetype('arial.ttf', 18)\n        except:\n            font_large = ImageFont.load_default()\n            font_small = ImageFont.load_default()\n    \n    # Format breed name for display\n    breed_name = format_breed_name(breed_id)\n    \n    # Draw breed name in center\n    bbox = draw.textbbox((0, 0), breed_name, font=font_large)\n    text_width = bbox[2] - bbox[0]\n    text_height = bbox[3] - bbox[1]\n    \n    x = (IMAGE_SIZE[0] - text_width) // 2\n    y = (IMAGE_SIZE[1] - text_height) // 2 - 20\n    \n    # Add text shadow for better readability\n    shadow_offset = 2\n    draw.text((x + shadow_offset, y + shadow_offset), breed_name, \n              font=font_large, fill=(0, 0, 0, 128))\n    draw.text((x, y), breed_name, font=font_large, fill='white')\n    \n    # Add \"Photo Coming Soon\" text\n    coming_soon = \"Photo Coming Soon\"\n    bbox_small = draw.textbbox((0, 0), coming_soon, font=font_small)\n    text_width_small = bbox_small[2] - bbox_small[0]\n    \n    x_small = (IMAGE_SIZE[0] - text_width_small) // 2\n    y_small = y + text_height + 20\n    \n    draw.text((x_small + 1, y_small + 1), coming_soon, \n              font=font_small, fill=(0, 0, 0, 100))\n    draw.text((x_small, y_small), coming_soon, \n              font=font_small, fill=(255, 255, 255, 200))\n    \n    # Add a simple paw print icon (basic circles)\n    paw_color = (255, 255, 255, 100)\n    paw_x = IMAGE_SIZE[0] - 80\n    paw_y = IMAGE_SIZE[1] - 60\n    \n    # Main pad\n    draw.ellipse([paw_x, paw_y, paw_x + 25, paw_y + 35], fill=paw_color)\n    \n    # Toes\n    draw.ellipse([paw_x - 10, paw_y - 5, paw_x + 5, paw_y + 10], fill=paw_color)\n    draw.ellipse([paw_x + 5, paw_y - 8, paw_x + 20, paw_y + 7], fill=paw_color)\n    draw.ellipse([paw_x + 15, paw_y - 5, paw_x + 30, paw_y + 10], fill=paw_color)\n    \n    # Save the image\n    image.save(output_path, 'JPEG', quality=85)\n    print(f\"Created: {output_path}\")\n\ndef main():\n    \"\"\"Main function to generate all breed images.\"\"\"\n    # Create output directory if it doesn't exist\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    \n    # Read breed labels from the ML model\n    if not os.path.exists(LABELS_FILE):\n        print(f\"Error: Labels file not found at {LABELS_FILE}\")\n        print(\"Please run this script from the scripts/training directory\")\n        return\n    \n    with open(LABELS_FILE, 'r') as f:\n        breed_ids = [line.strip() for line in f if line.strip()]\n    \n    print(f\"Found {len(breed_ids)} cat breeds to generate images for:\")\n    \n    # Generate an image for each breed\n    for breed_id in breed_ids:\n        output_path = os.path.join(OUTPUT_DIR, f\"{breed_id}.jpg\")\n        \n        # Skip if image already exists\n        if os.path.exists(output_path):\n            print(f\"Skipped: {output_path} (already exists)\")\n            continue\n            \n        try:\n            create_breed_image(breed_id, output_path)\n        except Exception as e:\n            print(f\"Error creating image for {breed_id}: {e}\")\n    \n    print(f\"\\n‚úÖ Completed! Generated placeholder images for {len(breed_ids)} breeds.\")\n    print(f\"Images saved to: {OUTPUT_DIR}\")\n    print(\"\\nüìù Next steps:\")\n    print(\"1. Replace placeholder images with real cat photos\")\n    print(\"2. Ensure all images are 400x300 pixels for consistency\")\n    print(\"3. Update pubspec.yaml if needed to include the new images\")\n\nif __name__ == '__main__':\n    main()\n